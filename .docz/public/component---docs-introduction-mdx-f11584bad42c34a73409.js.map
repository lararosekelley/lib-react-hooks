{"version":3,"sources":["webpack:///../docs/introduction.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0bAMO,IAAMA,EAAe,Q,sKAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,uEAAsD,mBAAGC,WAAW,KAAQ,CACxE,KAAQ,8CAD0C,SAAtD,uCAIA,iBAAQ,CACN,GAAM,iBADR,kBAGA,6LAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+qCAmDL,2CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mxBAwCL,+PAEF,mBAAGA,WAAW,KAAQ,CAChB,KAAQ,gDADd,kFAFE,M,6JASJJ,EAAWK,gBAAiB","file":"component---docs-introduction-mdx-f11584bad42c34a73409.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/tylucaskelley/Code/personal/lib-react-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`This library provides a set of general-purpose `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n      }}>{`hooks`}</a>{` for use in\nyour React components.`}</p>\n    <h2 {...{\n      \"id\": \"why-use-hooks\"\n    }}>{`Why use hooks?`}</h2>\n    <p>{`Hooks were introduced in React 16.8, and allow developers to utilize state and other features without needing\nto create class components. As an example, this code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { Component } from 'react';\nimport { Form, Field, Input } from 'some-ui-library';\n\nclass NewUserForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      age: 25,\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleEmailChange = this.handleNameChange.bind(this);\n    this.handleAgeChange = this.handleAgeChange.bind(this);\n  }\n\n  handleNameChange(e) {\n    this.setState({ name: e.target.value });\n  }\n\n  handleEmailChange(e) {\n    this.setState({ email: e.target.value });\n  }\n\n  handleAgeChange(e) {\n    this.setState({ age: e.target.value });\n  }\n\n  render() {\n    const { name, email, age } = this.state;\n\n    return (\n      <Form>\n        <Field label=\"Name\">\n          <Input value={name} onChange={this.handleNameChange} />\n        </Field>\n        <Field label=\"Email\">\n          <Input value={email} onChange={this.handleEmailChange} />\n        </Field>\n        <Field label=\"Age\">\n          <Input value={age} onChange={this.handleAgeChange} />\n        </Field>\n      </Form>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`could become this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { useState } from 'react';\nimport { Form, Field, Input } from 'some-ui-library';\n\nconst useInput = (initialValue) => {\n  const [ value, setValue ] = useState(initialValue);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return {\n    value,\n    onChange: handleChange,\n  };\n};\n\nconst NewUserForm = () => {\n  const name = useInput('John Doe');\n  const email = useInput('john.doe@example.com');\n  const age = useInput(25);\n\n  return (\n    <Form>\n      <Field label=\"Name\">\n        <Input {...name} />\n      </Field>\n      <Field label=\"Email\">\n        <Input {...email} />\n      </Field>\n      <Field label=\"Age\">\n        <Input {...age} />\n      </Field>\n    </Form>\n  );\n}\n\nexport default NewUserForm;\n`}</code></pre>\n    <p>{`Being able to rip out a lot of the logic and let the component focus on presentation reduces boilerplate, makes the\ncode more readable, and provides many other benefits. For a detailed explanation of the benefits of using hooks,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=dpw9EHDh2bM\"\n      }}>{`watch these great presentations by Dan Abramov and others from React Conf 2018`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}